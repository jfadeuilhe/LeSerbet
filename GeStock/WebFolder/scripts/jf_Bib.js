//---------------------------------------------------// jf_Bib.fs : Bibliothèques de fonctions généralistes////   v1.0 - Juillet 2014 - J. Fadeuilhe////---------------------------------------------------//---------------------------------------------------//            RECHERCHES//---------------------------------------------------//--------------------------------------------------- txt2Srch_ETfunction txt2Srch_ET(txt,chTxt,chNum){	var result = "";	var bs, lstVal, lstCT, lstCN;	var i;//debugger;			if((txt != "") && ((chTxt!="") || (chNum !=""))){		lstVal = txt.split(",");				if(chTxt && chTxt != ""){			lstCT = chTxt.split(",");			bs = '('+lstCT[0]+' == "*'+lstVal[0]+'*")';			if(lstVal.length > 1){				for(i=1; i<lstVal.length; i++){					if(lstVal[i] != "")						bs += ' && ('+lstCT[0]+' == "*'+lstVal[i]+'*")';				}			} 			if(lstCT.length > 1){				for(j=1; j<lstCT.length; j++){					if(lstCT[j]!=""){						bs += ' || ('+lstCT[j]+' == "*'+lstVal[0]+'*")';						if(lstVal.length > 1){							for(i=1; i<lstVal.length; i++){								if(lstVal[i] != "")									bs += ' && ('+lstCT[j]+' == "*'+lstVal[i]+'*")';							}						} 					}				}			}			result = bs;		}				if(chNum && chNum != ""){			lstCN = chNum.split(",");			bs = "("+lstCN[0]+" == "+lstVal[0]+")";			if(lstVal.length > 1){				for(i=1; i<lstVal.length; i++){					if(lstVal[i] != "")						bs += " && ("+lstCN[0]+" == "+lstVal[i]+")";				}			} 			if(lstCN.length > 1){				for(j=1; j<lstCT.length; j++){					if(lstCN[j]!=""){						bs += " || ("+lstCN[j]+" == "+lstVal[0]+")";						if(lstVal.length > 1){							for(i=1; i<lstVal.length; i++){								if(lstVal[i] != "")									bs += ' && ('+lstCN[j]+' == '+lstVal[i]+')';							}						} 					}				}			}			if(result = "")				result = bs;			else 				result = "("+result + ") || ("+bs+")";		}	}		return result;};//--------------------------------------------------- txt2Srch_OUfunction txt2Srch_OU(txt,chTxt,chNum){	var result = "";	var bs, lstVal, lstCT, lstCN;	var i, j;//debugger;	if((txt != "") && ((chTxt!="") || (chNum !=""))){		lstVal = txt.split(",");				if(chTxt && chTxt != ""){			lstCT = chTxt.split(",");			bs = '('+lstCT[0]+' == "*'+lstVal[0]+'*")';			if(lstVal.length > 1){				for(i=1; i<lstVal.length; i++){					if(lstVal[i] != "")						bs += ' || ('+lstCT[0]+' == "*'+lstVal[i]+'*")';				}			} 			if(lstCT.length > 1){				for(j=1; j<lstCT.length; j++){					if(lstCT[j]!=""){						bs += ' || ('+lstCT[j]+' == "*'+lstVal[0]+'*")';						if(lstVal.length > 1){							for(i=1; i<lstVal.length; i++){								if(lstVal[i] != "")									bs += ' || ('+lstCT[j]+' == "*'+lstVal[i]+'*")';							}						} 					}				}			}			result = bs;		}				if(chNum && chNum != ""){			lstCN = chNum.split(",");			bs = "("+lstCN[0]+" == "+lstVal[0]+")";			if(lstVal.length > 1){				for(i=1; i<lstVal.length; i++){					if(lstVal[i] != "")						bs += ' || ('+lstCN[0]+' == '+lstVal[i]+')';				}			} 			if(lstCN.length > 1){				if(lstCN[j]!=""){					bs += ' || ('+lstCN[j]+' == '+lstVal[0]+')';					if(lstVal.length > 1){						for(i=1; i<lstVal.length; i++){							if(lstVal[i] != "")								bs += ' || ('+lstCN[j]+' == '+lstVal[i]+')';						}					} 				}			}			if(result = "")				result = bs;			else 				result = '('+result + ') || ('+bs+')';		}	}		return result;};//--------------------------------------------------- txt2Srch_OU_ETfunction txt2Srch_OU_ET(txt,chTxt,chNum){	var result = "";	var bs, lstVal, lstCT, lstCN;	var i, j;	if((txt != "") && ((chTxt!="") || (chNum !=""))){		lstVal = txt.split(",");				if(chTxt && chTxt != ""){			lstCT = chTxt.split(",");			bs = '(('+lstCT[0]+' == "*'+lstVal[0]+'*")';			if(lstCT.length > 1){				for(i=1; i<lstCT.length; i++){					if(lstVal[i] != "")						bs += ' || ('+lstCT[i]+' == "*'+lstVal[0]+'*")';				}			} 			bs += ')';			if(lstVal.length > 1){				for(j=1; j<lstVal.length; j++){					if(lstVal[j]!=""){						bs += ' && ( ('+lstCT[0]+' == "*'+lstVal[j]+'*")';						if(lstCT.length > 1){							for(i=1; i<lstCT.length; i++){								if(lstVal[i] != "")									bs += ' || ('+lstCT[i]+' == "*'+lstVal[j]+'*")';							}						} 						bs += ')';					}				}			}			result = bs;		}				if(chNum && chNum != ""){			lstCN = chNum.split(",");			bs = "("+lstCN[0]+" == "+lstVal[0]+")";			if(lstVal.length > 1){				for(i=1; i<lstVal.length; i++){					if(lstVal[i] != "")						bs += ' || ('+lstCN[0]+' == '+lstVal[i]+')';				}			} 			if(lstCN.length > 1){				if(lstCN[j]!=""){					bs += ' || ('+lstCN[j]+' == '+lstVal[0]+')';					if(lstVal.length > 1){						for(i=1; i<lstVal.length; i++){							if(lstVal[i] != "")								bs += ' || ('+lstCN[j]+' == '+lstVal[i]+')';						}					} 				}			}			if(result = "")				result = bs;			else 				result = '('+result + ') || ('+bs+')';		}	}		return result;};//---------------------------------------------------//            DATES//---------------------------------------------------//--------------------------------------------------- affDatefunction affDate(D){		return D.getDate()+"/"+(D.getMonth()+1)+"/"+D.getFullYear();};//---------------------------------------------------//            INTERFACE//---------------------------------------------------//--------------------------------------------------- dansFenetrefunction duplicate(s){	     var attNames = s.getAttributeNames();     var entity = s.getCurrentElement()     var saveObj = {         touched : null,         stamp : null,         ID : entity.ID.value,         isNew : null,         relatedOne : [],         storage :[],         thisSource : s._private.id,         thisClass : s._private.dataClassName     };	 //is the entity new?	 saveObj.isNew = entity._private.isNew;      //add if it's touched     saveObj.touched = entity._private.touched;      //add current stamp     saveObj.stamp = entity._private.stamp;      //if it's touch we add it      //if(entity._private.touched === true){     for(var i = 0; i < attNames.length; i++){         addIt = false;         var entityData = entity[attNames[i]];         switch(entityData.att.kind) {             //push storage attributes here             case "storage":                 //if(entityData.touched===true){                     saveObj.storage.push({                         name:attNames[i],                         kind : "storage",                         touched : entityData.touched,                         value : entityData.value                     });                 //}                 break;             //puch the "related" 1 attributes here              case "relatedEntity":                 //if(entityData.touched===true){                     saveObj.relatedOne.push({                         name:attNames[i],                         kind : "relatedEntity",                         touched : entityData.touched,                         relKey : entityData.relKey,                         type : entityData.att.type                     });                 //}                 break;         }     }  //add new element  s.addNewElement();  //add storage attributes values  for(i = 0; i < saveObj.storage.length; i++ ){      if(saveObj.storage[i].name !== "ID"){       		s[saveObj.storage[i].name] = saveObj.storage[i].value      }   }   //refresh it!   s.serverRefresh();	//PS! user still needs to save.... OU PAS};